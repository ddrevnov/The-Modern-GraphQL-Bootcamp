{"id":"../node_modules/zen-observable-ts/lib/zenObservable.js","dependencies":[{"name":"/project/03-appolo-client/node_modules/zen-observable-ts/lib/zenObservable.js.map","includedInParent":true,"mtime":499162500000},{"name":"/project/03-appolo-client/node_modules/zen-observable-ts/src/zenObservable.ts","includedInParent":true,"mtime":499162500000},{"name":"/project/03-appolo-client/package.json","includedInParent":true,"mtime":1542835171955},{"name":"/project/03-appolo-client/node_modules/zen-observable-ts/package.json","includedInParent":true,"mtime":1542835171091},{"name":"zen-observable","loc":{"line":2,"column":26},"parent":"/project/03-appolo-client/node_modules/zen-observable-ts/lib/zenObservable.js","resolved":"/project/03-appolo-client/node_modules/zen-observable/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Observable = void 0;\n\nvar _zenObservable = _interopRequireDefault(require(\"zen-observable\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* tslint:disable */\nvar Observable = _zenObservable.default;\nexports.Observable = Observable;","map":{"mappings":[{"source":"../src/zenObservable.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":7},"generated":{"line":13,"column":0}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":13,"column":4}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":23},"generated":{"line":13,"column":14}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":23,"column":9},"generated":{"line":13,"column":17}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":7},"generated":{"line":13,"column":39}}],"sources":{"../src/zenObservable.ts":"/* tslint:disable */\n\nimport zenObservable from 'zen-observable';\n\nnamespace Observable {\n\n}\n\nimport { ZenObservable } from './types';\n\nexport { ZenObservable };\n\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\nexport type ObservableLike<T> = ZenObservable.ObservableLike<T>;\n\nexport const Observable: {\n  new <T>(subscriber: Subscriber<T>): Observable<T>;\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n} = <any>zenObservable;\n\nexport interface Observable<T> {\n  subscribe(\n    observerOrNext: ((value: T) => void) | ZenObservable.Observer<T>,\n    error?: (error: any) => void,\n    complete?: () => void,\n  ): ZenObservable.Subscription;\n\n  forEach(fn: (value: T) => void): Promise<void>;\n\n  map<R>(fn: (value: T) => R): Observable<R>;\n\n  filter(fn: (value: T) => boolean): Observable<T>;\n\n  reduce<R = T>(\n    fn: (previousValue: R | T, currentValue: T) => R | T,\n    initialValue?: R | T,\n  ): Observable<R | T>;\n\n  flatMap<R>(fn: (value: T) => ZenObservable.ObservableLike<R>): Observable<R>;\n\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n}\n"},"lineCount":null}},"hash":"77e51c4f4a8f55b95012ca2be07b581c","cacheData":{"env":{}}}